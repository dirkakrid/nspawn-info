#!/bin/bash
REMOVE="remove"
START="start"
BOOT="boot"
TEMPLATE="template"
RESUME="resume"
OPTIONS="options"
OPERATIONS="operations"
HELP="help"
LIST="list"
RUNNING="running"
TERMINATE="terminate"
BCKBOOT="background"
BCKSTART="detached"
DISCONNECT="disconnect"
PATHTO="{CONTAINERS}"
ACTION=$1
OBJECT=$2
SCRIPTLOCATION="{PATH_TO_SCRIPT}nspawn"
SHARED_LOCATION="{SHARED}"
ENABLE_X=1
ENABLE_SCREEN=1
OVERLAY_OS="os"
OVERLAY_WORKING="wd"
OVERLAY_FILES="fs"
SCREEN_START="nspawn-"
SCREEN_END="-container"
NON_OPERS="$LIST $HELP $OPTIONS $RUNNING $OPERATIONS"
ALL_OPTS="$REMOVE $START $BOOT $RESUME $TERMINATE $BCKBOOT $BCKSTART $DISCONNECT $NON_OPERS"
if [[ "$OBJECT" == */ ]]; then
    OBJECT=${OBJECT::-1}
fi

function print_help()
{
    if ! [ -z $1 ]; then
        printf "\nError: %0s\n\n" "$1"
    fi

    printf "Usage: nspawn-wrapper [ACTION] [OBJECT]\n"
    printf "%0s\n" "Provides a simple wrapper around systemd-nspawn"
    printf "\t%0s\t%20s\n" "ACTION" "The action to perform\n"
    printf "\t\t($ALL_OPTS)\n"
    printf "\t%0s\t%20s\n" "OBJECT" "The machine name to interact with"
    printf "\n"
    exit -1
}

function do_umount()
{
    if [ ! -d "$1" ]; then
        echo "Object does not exist"
        exit -1
    fi

    umount $1/$OVERLAY_FILES
}

function get_screen_name()
{
    echo "$SCREEN_START$1$SCREEN_END"
}

case $ACTION in
$OPTIONS)
    echo $NON_OPERS
    exit 0
    ;;
$HELP)
    print_help ""
    ;;
$OPERATIONS)
    echo $ALL_OPTS
    exit 0
    ;;
$LIST)
    find $PATHTO/ -maxdepth 1 -type d -printf "%f\n" | grep -v '/$'
    exit $?
    ;;
esac

# Make X available
if [ $ENABLE_X -eq 1 ]; then
    xhost +local: > /dev/null 2>&1
fi

if [ $UID -ne 0 ]; then
    printf "\nRestarting script using sudo\n"
    sudo $SCRIPTLOCATION $@
    exit $?
fi

if [ -z "$ACTION" ]; then
    print_help "Action is required!"
fi

if [ "$ACTION" == "$RUNNING" ]; then
    echo ""
    echo "Reporting from machinectl:"
    machinectl list
    echo ""
    echo "Reported from screen:"
    screen -list | grep "$SCREEN_START*.*$SCREEN_END"
    echo ""
    exit $?
fi

if [ -z "$OBJECT" ]; then
    print_help "Object is required!"
fi

OBJPATH=$PATHTO/$OBJECT
case $ACTION in
$DISCONNECT)
    do_umount $OBJPATH
    ;;
$REMOVE)
    do_umount $OBJPATH
    rm -rf $OBJPATH
    ;;
$START | $BOOT | $BCKBOOT | $BCKSTART)
    BOOT_OS_PATH=$OBJPATH
    if [[ $OBJECT != "$TEMPLATE" ]]; then
        BOOT_OS_PATH="$OBJPATH/$OVERLAY_FILES"
        mkdir -p $OBJPATH
        mkdir -p $OBJPATH/$OVERLAY_OS
        mkdir -p $BOOT_OS_PATH
        mkdir -p $OBJPATH/$OVERLAY_WORKING
        mount | grep -q "$OBJPATH/$OVERLAY_FILES"
        if [ $? -ne 0 ]; then
            mount -t overlay -o lowerdir=$PATHTO/$TEMPLATE,upperdir=$OBJPATH/$OVERLAY_OS,workdir=$OBJPATH/$OVERLAY_WORKING overlay $BOOT_OS_PATH/
        fi
    fi
    
    screen_args=""
    nspawn_args=""
    if [[ $ACTION == $BCKBOOT ]] || [[ $ACTION == $BOOT ]]; then
        nspawn_args="-b"
    fi

    if [[ $ACTION == $BCKBOOT ]] || [[ $ACTION == $BCKSTART ]]; then
        screen_args="-d -m"
    fi
    
    screen_name=$(get_screen_name "$OBJECT")
    CMD_TXT="systemd-nspawn $nspawn_args -D \"$BOOT_OS_PATH/\" -M \"$OBJECT\" --bind $SHARED_LOCATION ${@:3}"
    if [ $ENABLE_SCREEN -eq 1 ]; then
        CMD_TXT="screen $screen_args -S \"$screen_name\" $CMD_TXT"
    fi
    eval $CMD_TXT
    ;;
$RESUME)
    screen_name=$(get_screen_name "$OBJECT")
    screen -r "$screen_name"
    ;;
$TERMINATE)
    machinectl terminate "$OBJECT"
    do_umount $OBJPATH
    ;;
*)
    print_help "Invalid action: $ACTION"
    ;;
esac

