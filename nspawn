#!/bin/bash
INSTALL="install"
CLONE="clone"
REMOVE="remove"
START="start"
BOOT="boot"
UPDATE="update"
PACK="pack"
UNPACK="unpack"
REFRESH="refresh"
TEMPLATE="template"
RESUME="resume"
OPTIONS="options"
OPERATIONS="operations"
HELP="help"
LIST="list"
RUNNING="running"
TERMINATE="terminate"
BCKBOOT="background"
BCKSTART="detached"
COPY="copy"
PATHTO="{CONTAINERS}"
ACTION=$1
OBJECT=$2
SCRIPTLOCATION="{PATH_TO_SCRIPT}nspawn"
SHARED_LOCATION="{SHARED}"
ENABLE_X=1
SCREEN_START="nspawn-"
SCREEN_END="-container"
NON_OPERS="$LIST $HELP $OPTIONS $REFRESH $RUNNING $OPERATIONS"
ALL_OPTS="$INSTALL $CLONE $REMOVE $START $BOOT $UPDATE $PACK $UNPACK $RESUME $TERMINATE $BCKBOOT $BCKSTART $NON_OPERS $COPY"
if [[ "$OBJECT" == */ ]]; then
    OBJECT=${OBJECT::-1}
fi

function print_help()
{
    if ! [ -z $1 ]; then
        printf "\nError: %0s\n\n" "$1"
    fi

    printf "Usage: nspawn-wrapper [ACTION] [OBJECT]\n"
    printf "%0s\n" "Provides a simple wrapper around systemd-nspawn"
    printf "\t%0s\t%20s\n" "ACTION" "The action to perform\n"
    printf "\t\t($ALL_OPTS)\n"
    printf "\t%0s\t%20s\n" "OBJECT" "The machine name to interact with"
    printf "\n"
    exit -1
}

function check_exists()
{
    if [ ! -d "$1" ]; then
        echo "Object does not exist"
        exit -1
    fi
}

function check_not_exists()
{
    if [ -d "$1" ]; then
        echo "Object $1 already exists"
        exit -1
    fi
}

function get_screen_name()
{
    echo "$SCREEN_START$1$SCREEN_END"
}

case $ACTION in
$OPTIONS)
    echo $NON_OPERS
    exit 0
    ;;
$HELP)
    print_help ""
    ;;
$OPERATIONS)
    echo $ALL_OPTS
    exit 0
    ;;
$LIST)
    find $PATHTO -maxdepth 1 -type d -printf "%f\n" | grep -v '/$'
    exit $?
    ;;
esac

# Make X available
if [ $ENABLE_X -eq 1 ]; then
    xhost +local: > /dev/null 2>&1
fi

if [ $UID -ne 0 ]; then
    printf "\nRestarting script using sudo\n"
    sudo $SCRIPTLOCATION $@
    exit $?
fi

if [ -z "$ACTION" ]; then
    print_help "Action is required!"
fi

if [ "$ACTION" == "$RUNNING" ]; then
    echo ""
    echo "Reporting from machinectl:"
    machinectl list
    echo ""
    echo "Reported from screen:"
    screen -list | grep "$SCREEN_START*.*$SCREEN_END"
    echo ""
    exit $?
fi

if [ "$ACTION" == "$REFRESH" ]; then
    echo "Refreshing all"
    EXIT_CODES=0
    ALL_ITEMS=$(ls $PATHTO)
    for i in ${ALL_ITEMS[*]}; do
        echo -e "\033[0;31m$i\033[0m"
        $SCRIPTLOCATION $UPDATE $i
        if [ $? -ne 0 ]; then
            EXIT_CODES=-1
        fi
    done
    exit $EXIT_CODES
fi

if [ -z "$OBJECT" ]; then
    print_help "Object is required!"
fi

OBJPATH=$PATHTO/$OBJECT
TARFILE="$OBJECT.tar.gz"
case $ACTION in
$CLONE)
    check_not_exists "$OBJPATH"
    cp -R "$PATHTO/$TEMPLATE" $OBJPATH
    ;;
$COPY)
    check_exists "$OBJPATH"
    COPY_TO_OBJ=$PATHTO/$3
    check_not_exists "$COPY_TO_OBJ"
    cp -R "$OBJPATH" "$COPY_TO_OBJ"
    ;;
$INSTALL)
    check_exists "$OBJPATH"
    zypper --root $OBJPATH in "${@:3}"
    ;;
$REMOVE)
    check_exists "$OBJPATH"
    rm -r $OBJPATH
    ;;
$START | $BOOT | $BCKBOOT | $BCKSTART)
    check_exists "$OBJPATH"
    screen_args=""
    nspawn_args=""
    if [[ $ACTION == $BCKBOOT ]] || [[ $ACTION == $BOOT ]]; then
        nspawn_args="-b"
    fi

    if [[ $ACTION == $BCKBOOT ]] || [[ $ACTION == $BCKSTART ]]; then
        screen_args="-d -m"
    fi
    
    screen_name=$(get_screen_name "$OBJECT")
    screen $screen_args -S "$screen_name" systemd-nspawn $nspawn_args -D "$OBJPATH/" -M "$OBJECT" --bind $SHARED_LOCATION "${@:3}"
    ;;
$RESUME)
    screen_name=$(get_screen_name "$OBJECT")
    screen -r "$screen_name"
    ;;
$UPDATE)
    check_exists "$OBJPATH"
    zypper --root $OBJPATH ref
    zypper --root $OBJPATH up
    ;;
$PACK)
    check_exists "$OBJPATH"
    if [ -e $TARFILE ]; then
        echo "File $TARFILE already exists"
        exit -1
    fi

    tar -cvpzf $TARFILE --one-file-system "$OBJPATH/"
    ;;
$UNPACK)
    check_not_exists "$OBJPATH"
    if [ ! -e $TARFILE ]; then
        echo "No tar file found: $TARFILE"
        exit -1
    fi

    tar xzvf $TARFILE
    ;;
$TERMINATE)
    machinectl terminate "$OBJECT"
    ;;
*)
    print_help "Invalid action: $ACTION"
    ;;
esac
