#!/bin/bash

# Keywords
REMOVE="remove"
START="start"
BOOT="boot"
RESUME="resume"
OPTIONS="options"
OPERATIONS="operations"
HELP="help"
LIST="list"
RUNNING="running"
STATUS="status"
TERMINATE="terminate"
BCKBOOT="background"
BCKSTART="detached"
DISCONNECT="disconnect"
PACK="pack"
VERSION="version"
STOP="stop"
UPDATE="update"

# overlayfs settings
OVERLAY_OS="os"
OVERLAY_WORKING="wd"
OVERLAY_FILES="fs"

# Screen naming/settings
SCREEN_START="nspawn-"
SCREEN_END="-container"

# Config file
CONFIG_FILE_NAME=".nspawn-info"
CONFIG_FILE_OFFSET="/.config/$CONFIG_FILE_NAME"
OVERLAY_SETTING="overlay"
ADDED_ARGS_SETTING="arguments"

# Help/command aggregates
SCRIPT_VERSION="1.4.1"
NON_OPERS="$LIST $HELP $OPTIONS $RUNNING $OPERATIONS $VERSION $STATUS"
ALL_OPTS="$REMOVE $START $BOOT $RESUME $TERMINATE $BCKBOOT $BCKSTART $PACK $NON_OPERS $STOP $UPDATE"

# per instance inputs
ACTION=$1
OBJECT=$2

# Evaluate any optional or required environmental settings
function get-environment-setting()
{
    current_val=$(eval echo "\$"$1)
    if [ -z "$current_val" ]; then
        current_val=$2
    fi
    echo $current_val
}

# Variables for the location
NSPAWN_ENV_PREFIX="NSPAWN_INFO_"
ENV_JOURNAL_VALUE="${NSPAWN_ENV_PREFIX}JOURNAL"
ENV_ARGS_VALUE="${NSPAWN_ENV_PREFIX}ARGS"
ENV_CONTAINER_VALUE="${NSPAWN_ENV_PREFIX}CONTAINERS"
ENV_XHOST_VALUE="${NSPAWN_ENV_PREFIX}XHOST"
ENV_SCREEN_VALUE="${NSPAWN_ENV_PREFIX}SCREEN"
ENV_OVERLAY_VALUE="${NSPAWN_ENV_PREFIX}OVERLAY"
ENV_TEMPLATE_VALUE="${NSPAWN_ENV_PREFIX}TEMPLATE"
SCRIPT_PATH="$( cd "$(dirname "$0")" ; pwd -P )"
SCRIPTLOCATION=$SCRIPT_PATH/nspawn
COMMON_ARGS=$(get-environment-setting "$ENV_ARGS_VALUE")
PATHTO=$(get-environment-setting "$ENV_CONTAINER_VALUE" "$SCRIPT_PATH/containers")
ENABLE_X=$(get-environment-setting "$ENV_XHOST_VALUE" 1)
ENABLE_SCREEN=$(get-environment-setting "$ENV_SCREEN_VALUE" 0)
ENABLE_OVERLAY=$(get-environment-setting "$ENV_OVERLAY_VALUE" 0)
TEMPLATE=$(get-environment-setting "$ENV_TEMPLATE_VALUE" "template")
NSPAWN_SYSTEMD_CAT=$(get-environment-setting "$ENV_JOURNAL_VALUE" "nspawn")
CONTAINER_CONFIG="$PATHTO/$CONFIG_FILE_NAME"

if [ $ENABLE_OVERLAY -eq 1 ]; then
    ALL_OPTS=$ALL_OPTS" $DISCONNECT"
fi

if [[ "$OBJECT" == */ ]]; then
    OBJECT=${OBJECT::-1}
fi

function print_help()
{
    ERR=$(echo $1 | cut -d " " -f 1)
    if ! [ -z $ERR ]; then
        printf "\nError: %0s\n\n" "$1"
    fi

    printf "Usage: nspawn [ACTION] [OBJECT]\n"
    printf "%0s\n" "Provides a simple wrapper around systemd-nspawn"
    printf "\t%0s\t%20s\n" "ACTION" "The action to perform"
    printf "\t\t($ALL_OPTS)\n"
    printf "\t%0s\t%20s\n" "OBJECT" "The machine name to interact with"
    printf "\n"
    printf "\n"
    printf "Environment variables:\n"
    printf "\t$ENV_ARGS_VALUE\tDefault arguments to apply to all containers\n"
    printf "\t\t$COMMON_ARGS\n"
    printf "\t$ENV_CONTAINER_VALUE\tLocation of container files\n"
    printf "\t\t$PATHTO\n"
    printf "\t$ENV_XHOST_VALUE\tEnable X sharing\n"
    printf "\t\t$ENABLE_X\n"
    printf "\t$ENV_SCREEN_VALUE\tEnable screen to control/background containers\n"
    printf "\t\t$ENABLE_SCREEN\n"
    printf "\t$ENV_OVERLAY_VALUE\tEnable the use of overlayfs\n"
    printf "\t\t$ENABLE_OVERLAY\n"
    printf "\t$ENV_TEMPLATE_VALUE\tTemplate name\n"
    printf "\t\t$TEMPLATE\n"
    printf "\t$ENV_JOURNAL_VALUE\tJournal category\n"
    printf "\t\t$NSPAWN_SYSTEMD_CAT\n"
    printf "\n"
    exit -1
}

function do-logging()
{
    echo "$1" | systemd-cat -t "$NSPAWN_SYSTEMD_CAT"
}

function get-config-value()
{
    CONFIG_FILE=$1$CONFIG_FILE_OFFSET
    RESULT=$(get-config-entry $CONFIG_FILE $2 $3)
    if [ -z "$RESULT" ]; then
        RESULT=$(get-config-entry $CONTAINER_CONFIG $2 $3)
    fi
    if [ -z "$RESULT" ]; then
        RESULT="$4"
    fi

    echo $RESULT
}

function get-config-entry()
{
    RESULT=""
    CONFIG_FILE=$1
    if [ -e $CONFIG_FILE ]; then
        RESULT=$(cat $CONFIG_FILE | sed -n -e "s/\[$2\]\.$3=//p")
    fi

    echo $RESULT
}

function do_umount()
{
    if [ ! -d "$1" ]; then
        echo "Object does not exist"
        exit -1
    fi

    umount $1/$OVERLAY_FILES
}

function get_screen_name()
{
    echo "$SCREEN_START$1$SCREEN_END"
}

function check-dir()
{
    if [ ! -d $1 ]; then
        echo "Invalid setting for $1"
        exit -1
    fi
}

function list-items()
{
    find $PATHTO/ -maxdepth 1 -type d -printf "%f\n" | grep -v '/$' | sort
}

function check-dirs-exist()
{
    check-dir $PATHTO "$ENV_CONTAINER_VALUE"
}

case $ACTION in
$OPTIONS)
    echo $NON_OPERS
    exit 0
    ;;
$HELP)
    print_help ""
    ;;
$OPERATIONS)
    echo $ALL_OPTS
    exit 0
    ;;
$LIST)
    check-dirs-exist
    list-items
    exit $?
    ;;
$VERSION)
    echo "Script Version: $SCRIPT_VERSION"
    echo "systemd-nspawn version:"
    systemd-nspawn --version
    exit 0
    ;;
esac

# Make X available
if [ $ENABLE_X -eq 1 ]; then
    xhost +local: > /dev/null 2>&1
fi

if [ -z "$ACTION" ]; then
    print_help "Action is required!"
fi

if [ $UID -ne 0 ]; then
    printf "\nRestarting script using sudo\n"
    sudo -E $SCRIPTLOCATION $@
    exit $?
fi

do-logging "Action: $ACTION $OBJECT"

check-dirs-exist

# status is an alias for running
if [ "$ACTION" == "$STATUS" ]; then
    ACTION=$RUNNING
fi

if [ "$ACTION" == "$RUNNING" ]; then
    echo ""
    echo "Reporting from machinectl:"
    machinectl list
    echo ""
    echo "Reported from screen:"
    screen -list | grep "$SCREEN_START*.*$SCREEN_END" | sort
    echo ""
    exit $?
fi

if [ "$ACTION" == "$UPDATE" ]; then
    for item in $(list-items); do
        if [ ! -z "$OBJECT" ]; then
            if [[ "$item" != "$OBJECT" ]]; then
                continue
            fi
        fi
        echo "updating: $PATHTO/$item"
        screen_check=$(get_screen_name "$item")
        screen -list | grep -q -F "$screen_check"
        if [ $? -eq 0 ]; then
            SKIP_KEY="skip"
            FORCE_KEY="force"
            KILL_KEY="kill"
            read -p "$item is running: ($SKIP_KEY/$FORCE_KEY/$KILL_KEY)? " skf
            do-logging "update command: $skf"
            case $skf in
                $FORCE_KEY)
                    ;;
                $KILL_KEY)
                    machinectl terminate "$item"
                    ;;
                *)
                    continue
                    ;;
            esac
        fi
        arch-chroot $PATHTO/$item /bin/bash -c 'pacman -Syu'
    done
    exit -1
fi

if [ -z "$OBJECT" ]; then
    print_help "Object is required!"
fi

USER_CONFIG=$(eval echo "~$SUDO_USER")
ADDED_ARGS=$(get-config-value "$USER_CONFIG" "$OBJECT" "$ADDED_ARGS_SETTING" "")
if [[ $OBJECT != "$TEMPLATE" ]]; then
    ENABLE_OVERLAY=$(get-config-value "$USER_CONFIG" "$OBJECT" "$OVERLAY_SETTING" "$ENABLE_OVERLAY")
fi

OBJPATH=$PATHTO/$OBJECT
case $ACTION in
$DISCONNECT | $REMOVE | $TERMINATE | $STOP)
    if [[ $ACTION == $TERMINATE ]] || [[ $ACTION == $STOP ]]; then
        machinectl terminate "$OBJECT"
    fi

    if [ $ENABLE_OVERLAY -eq 1 ]; then
        do_umount $OBJPATH
    fi
    
    if [[ $ACTION == $REMOVE ]]; then
        rm -rf $OBJPATH
    fi
    ;;
$START | $BOOT | $BCKBOOT | $BCKSTART)
    BOOT_OS_PATH=$OBJPATH
    if [[ $OBJECT != "$TEMPLATE" ]]; then
        if [ $ENABLE_OVERLAY -eq 1 ]; then
            BOOT_OS_PATH="$OBJPATH/$OVERLAY_FILES"
            mkdir -p $OBJPATH
            mkdir -p $OBJPATH/$OVERLAY_OS
            mkdir -p $BOOT_OS_PATH
            mkdir -p $OBJPATH/$OVERLAY_WORKING
            mount | grep -q "$OBJPATH/$OVERLAY_FILES"
            if [ $? -ne 0 ]; then
                mount -t overlay -o lowerdir=$PATHTO/$TEMPLATE,upperdir=$OBJPATH/$OVERLAY_OS,workdir=$OBJPATH/$OVERLAY_WORKING overlay $BOOT_OS_PATH/
            fi
        else
            if [ ! -d $BOOT_OS_PATH ]; then
                read -p "creating '$OBJECT', continue (y/n)? " yn
                if [[ $yn != "y" ]]; then
                    exit -1
                fi
                echo "Setting up $OBJECT for first-time use (this may take a moment)..."
                cp -R $PATHTO/$TEMPLATE $BOOT_OS_PATH
            fi
        fi
    fi
    
    screen_args=""
    nspawn_args=""
    if [[ $ACTION == $BCKBOOT ]] || [[ $ACTION == $BOOT ]]; then
        nspawn_args="-b"
    fi

    if [[ $ACTION == $BCKBOOT ]] || [[ $ACTION == $BCKSTART ]]; then
        screen_args="-d -m"
    fi
    
    screen_name=$(get_screen_name "$OBJECT")
    if [ $ENABLE_SCREEN -eq 1 ]; then
        screen -S $screen_name -Q select . &>/dev/null
        if [ $? -eq 0 ]; then
            echo "$OBJECT is already running"
            exit -1
        fi
    fi
    COMMON_BIND=""
    if [ ! -z "$COMMON_ARGS" ]; then
        COMMON_BIND="$COMMON_ARGS"
    fi
    CMD_TXT="systemd-nspawn $nspawn_args -D \"$BOOT_OS_PATH/\" -M \"$OBJECT\" $COMMON_BIND $ADDED_ARGS ${@:3}"
    if [ $ENABLE_SCREEN -eq 1 ]; then
        CMD_TXT="screen $screen_args -S \"$screen_name\" $CMD_TXT"
    fi
    do-logging "$CMD_TXT"
    eval $CMD_TXT
    ;;
$PACK)
    CURRENT_PWD=$PWD
    cd $PATHTO
    tar -cvpzf $CURRENT_PWD/nspawn-$OBJECT.tar.gz --one-file-system "$OBJECT/"
    cd $CURRENT_PWD
    ;;
$RESUME)
    screen_name=$(get_screen_name "$OBJECT")
    screen -r "$screen_name"
    ;;
*)
    print_help "Invalid action: $ACTION"
    ;;
esac

