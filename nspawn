#!/bin/bash

# Keywords
REMOVE="remove"
BOOT="start"
RESUME="resume"
OPTIONS="options"
OPERATIONS="operations"
HELP="help"
LIST="list"
RUNNING="running"
TERMINATE="kill"
BCKBOOT="background"
PACK="pack"
VERSION="version"
POWEROFF="stop"
SHELL="shell"
LOGIN="connect"
REBOOT="reboot"
UPDATE="update"
DEBUG="debug"
CREATE="create"

# Screen naming/settings
SCREEN_START="nspawn-"
SCREEN_END="-container"

# Config file
CONFIG_FILE_NAME=".nspawn-info"
CONFIG_FILE_OFFSET="/.config/$CONFIG_FILE_NAME"
ADDED_ARGS_SETTING="arguments"

# Help/command aggregates
SCRIPT_VERSION="1.5.0"
NON_OPERS="$LIST $HELP $OPTIONS $RUNNING $OPERATIONS $VERSION"
ALL_OPTS="$DEBUG $CREATE $UPDATE $SHELL $LOGIN $REBOOT $POWEROFF $REMOVE $BOOT $RESUME $TERMINATE $BCKBOOT $PACK $NON_OPERS"

# per instance inputs
ACTION=$1
OBJECT=$2

# Evaluate any optional or required environmental settings
function get-environment-setting()
{
    current_val=$(eval echo "\$"$1)
    if [ -z "$current_val" ]; then
        current_val=$2
    fi
    echo $current_val
}

# Variables for the location
NSPAWN_ENV_PREFIX="NSPAWN_INFO_"
ENV_JOURNAL_VALUE="${NSPAWN_ENV_PREFIX}JOURNAL"
ENV_ARGS_VALUE="${NSPAWN_ENV_PREFIX}ARGS"
ENV_CONTAINER_VALUE="${NSPAWN_ENV_PREFIX}CONTAINERS"
ENV_XHOST_VALUE="${NSPAWN_ENV_PREFIX}XHOST"
ENV_SCREEN_VALUE="${NSPAWN_ENV_PREFIX}SCREEN"
ENV_TEMPLATE_VALUE="${NSPAWN_ENV_PREFIX}TEMPLATE"
SCRIPT_PATH="$( cd "$(dirname "$0")" ; pwd -P )"
SCRIPTLOCATION=$SCRIPT_PATH/nspawn
COMMON_ARGS=$(get-environment-setting "$ENV_ARGS_VALUE")
PATHTO=$(get-environment-setting "$ENV_CONTAINER_VALUE" "$SCRIPT_PATH/containers")
ENABLE_SCREEN=$(get-environment-setting "$ENV_SCREEN_VALUE" 0)
TEMPLATE=$(get-environment-setting "$ENV_TEMPLATE_VALUE" "template")
NSPAWN_SYSTEMD_CAT=$(get-environment-setting "$ENV_JOURNAL_VALUE" "nspawn")
ENABLE_XHOST=$(get-environment-setting "$ENV_XHOST_VALUE" 1)
CONTAINER_CONFIG="$PATHTO/$CONFIG_FILE_NAME"

if [[ "$OBJECT" == */ ]]; then
    OBJECT=${OBJECT::-1}
fi

function list-items()
{
    find $PATHTO/ -maxdepth 1 -type d -printf "%f\n" | grep -v '/$' | sort
}

function print_help()
{
    ERR=$(echo $1 | cut -d " " -f 1)
    if ! [ -z $ERR ]; then
        printf "\nError: %0s\n\n" "$1"
    fi

    printf "Usage: nspawn [ACTION] [OBJECT?]\n"
    printf "%0s\n" "Provides a simple wrapper around systemd-nspawn"
    printf "\t%0s\n" "ACTION"
    NON_OPERS_HELP="|"$(echo $NON_OPERS | sed "s/ /\|/g")"|"
    for item in $(echo $ALL_OPTS | xargs -n1 | sort); do
        HELP_LINE=""
        echo $NON_OPERS_HELP | grep -q "|$item|"
        if [ $? -eq 1 ]; then
            HELP_LINE="[OBJECT]"
        fi
        case $item in
            $REMOVE)
                HELP_TEXT="stop and remove/destroy the container"
                ;;
            $BOOT)
                HELP_TEXT="start/boot the container"
                ;;
            $RESUME)
                HELP_TEXT="restore the start/boot connection"
                ;;
            $OPTIONS)
                HELP_TEXT="available option list"
                ;;
            $OPERATIONS)
                HELP_TEXT="container operation list"
                ;;
            $HELP)
                HELP_TEXT="display this help message"
                ;;
            $LIST)
                HELP_TEXT="list containers on disk"
                ;;
            $RUNNING)
                HELP_TEXT="display running container information"
                ;;
            $TERMINATE)
                HELP_TEXT="stop/terminate a running container"
                ;;
            $PACK)
                HELP_TEXT="package/archive a container"
                ;;
            $VERSION)
                HELP_TEXT="print version information"
                ;;
            $DEBUG)
                HELP_TEXT="connect to a container via 'simple' shell"
                ;;
            $POWEROFF)
                HELP_TEXT="poweroff a container"
                ;;
            $SHELL)
                HELP_TEXT="connect with a shell to a running container"
                ;;
            $LOGIN)
                HELP_TEXT="get a new login session on a running container"
                ;;
            $REBOOT)
                HELP_TEXT="reboot a container"
                ;;
            $UPDATE)
                HELP_TEXT="update a container on the filesystem"
                ;;
            $CREATE)
                HELP_TEXT="create a new container"
                ;;
            $BCKBOOT)
                HELP_TEXT="start and background"
                ;;
            *)
                HELP_TEXT=""
                ;;
        esac
        HELP_TEXT="$HELP_TEXT $HELP_LINE"
        printf "\t\t%10s\t%20s\n" "$item" "$HELP_TEXT"
    done
    printf "\n\t%0s\n" "OBJECT"
    for item in $(list-items); do
        printf "\t\t%10s\n" "$item"
    done
    printf "\n"
    printf "\n"
    printf "Environment variables:\n"
    printf "\t$ENV_ARGS_VALUE\tDefault arguments to apply to all containers\n"
    printf "\t\t$COMMON_ARGS\n"
    printf "\t$ENV_CONTAINER_VALUE\tLocation of container files\n"
    printf "\t\t$PATHTO\n"
    printf "\t$ENV_SCREEN_VALUE\tEnable screen to control/background containers\n"
    printf "\t\t$ENABLE_SCREEN\n"
    printf "\t$ENV_TEMPLATE_VALUE\tTemplate name\n"
    printf "\t\t$TEMPLATE\n"
    printf "\t$ENV_JOURNAL_VALUE\tJournal category\n"
    printf "\t\t$NSPAWN_SYSTEMD_CAT\n"
    printf "\t$ENV_XHOST_VALUE\tEnable X hosting\n"
    printf "\t\t$ENABLE_XHOST\n"
    printf "\n"
    exit -1
}

function do-logging()
{
    echo "$1" | systemd-cat -t "$NSPAWN_SYSTEMD_CAT"
}

function get-config-value()
{
    CONFIG_FILE=$1$CONFIG_FILE_OFFSET
    RESULT=$(get-config-entry $CONFIG_FILE $2 $3)
    if [ -z "$RESULT" ]; then
        RESULT=$(get-config-entry $CONTAINER_CONFIG $2 $3)
    fi
    if [ -z "$RESULT" ]; then
        RESULT="$4"
    fi

    echo $RESULT
}

function get-config-entry()
{
    RESULT=""
    CONFIG_FILE=$1
    if [ -e $CONFIG_FILE ]; then
        RESULT=$(cat $CONFIG_FILE | sed -n -e "s/\[$2\]\.$3=//p")
    fi

    echo $RESULT
}

function get_screen_name()
{
    echo "$SCREEN_START$1$SCREEN_END"
}

function check-dir()
{
    if [ ! -d $1 ]; then
        echo "Invalid setting for $1"
        exit -1
    fi
}

function check-dirs-exist()
{
    check-dir $PATHTO "$ENV_CONTAINER_VALUE"
}

case $ACTION in
$OPTIONS)
    echo $NON_OPERS
    exit 0
    ;;
$HELP)
    print_help ""
    ;;
$OPERATIONS)
    echo $ALL_OPTS
    exit 0
    ;;
$LIST)
    check-dirs-exist
    list-items
    exit $?
    ;;
$VERSION)
    echo "Script Version: $SCRIPT_VERSION"
    echo "systemd-nspawn version:"
    systemd-nspawn --version
    exit 0
    ;;
esac

if [ $ENABLE_XHOST -eq 1 ]; then
    xhost +local: > /dev/null 2>&1
fi

if [ -z "$ACTION" ]; then
    print_help "Action is required!"
fi

if [ $UID -ne 0 ]; then
    sudo -E $SCRIPTLOCATION $@
    exit $?
fi

do-logging "Action: $ACTION $OBJECT"

check-dirs-exist

function print-running()
{
    printf "\n%20s%20s%20s" "$1" "$2" "$3"
}

if [ "$ACTION" == "$RUNNING" ]; then
    print-running "name" "machinectl" "screen"
    print-running "----" "----------" "------"
    for item in $(list-items); do
        machine_ctl=$(machinectl list | grep -E "^$item " | cut -d " " -f 1)
        item_name=$(get_screen_name "$item")
        screen_as=$(screen -list | grep "$item_name" | cut -d "." -f 2 | cut -d "(" -f 1 | xargs | sed "s/^$SCREEN_START//g" | sed "s/$SCREEN_END$//g")
        print-running "$item" "$machine_ctl" "$screen_as"
        
    done
    echo
    echo
    exit 0
fi

if [ -z "$OBJECT" ]; then
    print_help "Object is required!"
fi

USER_CONFIG=$(eval echo "~$SUDO_USER")
ADDED_ARGS=$(get-config-value "$USER_CONFIG" "$OBJECT" "$ADDED_ARGS_SETTING" "")

function screen-up()
{
    screen -S $1 -Q select . &>/dev/null
    echo $?
}

function is-running()
{
    result=0 
    if [ $ENABLE_SCREEN -eq 1 ]; then
        is_up=$(screen-up "$1")
        if [ $is_up -eq 0 ]; then
            result=1
        fi
    fi
    echo $result
}

OBJPATH=$PATHTO/$OBJECT
screen_name=$(get_screen_name "$OBJECT")
running=$(is-running "$screen_name")
case $ACTION in
$REMOVE | $TERMINATE | $POWEROFF)
    if [[ $ACTION == $POWEROFF ]]; then
        machinectl poweroff "$OBJECT"
    fi

    if [[ $ACTION == $REMOVE ]] || [[ $ACTION == $TERMINATE ]]; then
        machinectl terminate "$OBJECT"
    fi

    if [[ $ACTION == $REMOVE ]]; then
        rm -rf $OBJPATH
    fi
    ;;
$BOOT | $BCKBOOT | $DEBUG | $CREATE)
    BOOT_OS_PATH=$OBJPATH
    nspawn_args=""
    screen_args=""
    if [[ $OBJECT != "$TEMPLATE" ]]; then
        if [[ $ACTION == $BCKBOOT ]] ; then
            screen_args="-d -m"
        fi
        nspawn_args="-b"
        if [[ $ACTION == $DEBUG ]] || [[ $ACTION == $CREATE ]]; then
            nspawn_args=""
        fi
        if [ ! -d $BOOT_OS_PATH ]; then
            if [[ $ACTION == $CREATE ]]; then
                read -p "creating '$OBJECT', continue (y/n)? " yn
                if [[ $yn != "y" ]]; then
                    exit -1
                fi
                echo "Setting up $OBJECT for first-time use (this may take a moment)..."
                cp -R $PATHTO/$TEMPLATE $BOOT_OS_PATH
            else
                echo "$OBJECT does not exist"
                exit -1
            fi
        fi
    fi
    
    if [ $running -eq 1 ]; then 
        echo "$OBJECT is already running"
        exit -1
    fi
    COMMON_BIND=""
    if [ ! -z "$COMMON_ARGS" ]; then
        COMMON_BIND="$COMMON_ARGS"
    fi
    CMD_TXT="systemd-nspawn $nspawn_args -D \"$BOOT_OS_PATH/\" -M \"$OBJECT\" $COMMON_BIND $ADDED_ARGS ${@:3}"
    if [ $ENABLE_SCREEN -eq 1 ]; then
        CMD_TXT="screen $screen_args -S \"$screen_name\" $CMD_TXT"
    fi
    do-logging "$CMD_TXT"
    eval $CMD_TXT
    ;;
$LOGIN)
    machinectl login "$OBJECT"
    ;;
$SHELL)
    machinectl shell "$OBJECT"
    ;;
$REBOOT)
    machinectl reboot "$OBJECT"
    ;;
$UPDATE | $PACK)
    if [ $running -eq 1 ]; then
        echo "$OBJECT is running...skipping $ACTION"
        exit -1
    fi
    
    CURRENT_PWD=$PWD
    cd $PATHTO
    if [[ $ACTION == $PACK ]]; then
        tar -cvpzf $CURRENT_PWD/nspawn-$OBJECT.tar.gz --one-file-system "$OBJECT/"
    else
        arch-chroot $OBJPATH /bin/bash -c 'pacman -Syyu'
    fi
    cd $CURRENT_PWD
    ;;
$RESUME)
    screen -r "$screen_name"
    ;;
*)
    print_help "Invalid action: $ACTION"
    ;;
esac

